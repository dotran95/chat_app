# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "build"
  lane :dev do
    # add actions here: https://docs.fastlane.tools/actions

    KEYCHAIN_PASS = ENV["KEYCHAIN_PASS"]
    CETIFICATES_DEV_PASS = ENV["CERTIFICATES_DEV_PASS"]
    PROVISIONING = './profile/' + ENV["DEV_PROVISIONING"]
    CETIFICATE = './profile/' + ENV["DEV_CERTIFICATE"]

    setupCodeSigning(KEYCHAIN_PASS, CETIFICATES_DEV_PASS, PROVISIONING, CETIFICATE)

    fileName = filename("chat_dev")

    output = outputDirectory()

    build_app(scheme: "dev", silent: true, clean: true, output_directory: output, export_method: "development", output_name: fileName)

    sendToSlack(fileName, 'Dev')

  end

  lane :product do
    # add actions here: https://docs.fastlane.tools/actions
    KEYCHAIN_PASS = ENV["KEYCHAIN_PASS"]
    CETIFICATES_DEV_PASS = ENV["CERTIFICATES_PROD_PASS"]
    PROVISIONING = './profile/' + ENV["PROD_PROVISIONING"]
    CETIFICATE = './profile/' + ENV["PROD_CERTIFICATE"]

    setupCodeSigning(KEYCHAIN_PASS, CETIFICATES_DEV_PASS, PROVISIONING, CETIFICATE)

    fileName = filename("chat_prod")

    output = outputDirectory()

    build_app(scheme: "product", silent: true, clean: true, output_directory: output, export_method: "development", output_name: fileName)

    sendToSlack(fileName, "Product")
  end


  # error block is executed when a error occurs
  error do |lane, exception|
    slack(
      # message with short human friendly message
      message: exception.to_s, 
      slack_url:ENV["FASTLANE_SLACK_WEBHOOKS"], 
      success: false, 
      payload: { "Output" => exception.error_info.to_s } 
    )
  end

end

def setupCodeSigning(keychainPassword, certificatePassword, profilePath, certificatePath)
  create_keychain(
    name: "CI",
    password: keychainPassword,
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
  )
  install_provisioning_profile(path: profilePath)
  import_certificate(
    certificate_path: certificatePath,
    certificate_password: certificatePassword,
    keychain_name: "CI",
    keychain_password: keychainPassword
  )
end

def filename(name)
    version = get_build_number(xcodeproj: "Chat.xcodeproj")
    date = Time.now.strftime("%Y%m%d")
    increment_build_number
    return name + "_" + date + "_" + version + ".ipa"
end

def outputDirectory()
  return "./build"
end

def sendToSlack(fileName, target)
      build = get_build_number(xcodeproj: "Chat.xcodeproj")
      version = get_version_number(xcodeproj: "Chat.xcodeproj", target: target)
    slack(
      slack_url:ENV["FASTLANE_SLACK_WEBHOOKS"], 
      message: "New version ipa",
      payload: {  # Optional, lets you specify any number of your own Slack attachments.
        "Build Date" => Time.new.to_s,
        "FileName" => fileName,
        "Version" => version,
        "BuildNumber" => build
      },
    )
end